day-06
//anonymoys
//arrow
//iife
//api
//example api
//handle api steps

1.anonymoys
hole function 
3.IIFE:
immeadelty invoked function execution
/*syntax
(function(){
//
})(Call function);
4.API
intro api
//Application programming interface

day-07
//oop
//4pillarers
abstraction(decoding)
encapsulation(securty)
inheritance(child append parent)
polymorhism(one person do multiple role)
//main concept in oop
//class
//object

class:(collection of object,property,method)
object:(have a refferenc variable)
new:it is opp feature.that will create a new fresh object for only that class
refference variable=s1;

this->tempory refference in store.
this.brand=brand;

class car{
    constructor(brand,color){
        this.brand=brand;
        this.color=color;
    }
}
let c1= new car("audi","black");

console.log(c1.brand);
console.log(c1);
//some features
//a single object can have multiple reference
class car{
    constructor(brand,color){
        this.brand=brand;
        this.color=color;
    }
}
let c1= new car("audi","black");
//add new object
let c2= new car("audi2","black2");
let c3= new car("audi3","black3");
let c4=c3;
console.log(c1.brand);
console.log(c3);
console.log(c2);
console.log(c4.brand);

//method (method mean fuction,inside a class we use a fuction called methods.then we not use a function keyword )
class car{
    constructor(brand,color){
        this.brand=brand;
        this.color=color;
    }
    getbrand(){
        return this.brand;
        }
}
let c1= new car("audi","black");
console.log(c1.brand);
console.log(c1);
console.log(c1.getbrand());
//example
class rectangle{
    constructor(length,breadth){
        this.length=length;
        this.breadth=breadth;
            }
            area(){
                return this.length*this.breadth;
            }
}
let a1=new rectangle(2,3);

console.log(a1.length);
console.log(a1.length);
console.log(a1.area());

//day08
//mfr

//day09
//call by value,call by referenc,spead

//spread
//normal
let arr=['hello','guvi'];
console.log(arr);
//ex 1.expanding the Array
console.log(...arr);
//ex 2.string to char Array
let doc="hello";
let char=[...doc];
console.log(char);
//ex 3.combining of array using spread
let a1=[1,2,3];
let a2=[4,5,6];
//console.log(a1.concat(a2));
let a3=[...a1,...a2];
console.log(a3);
//ex 4.push a value in array
let a11=[1,2,3];
let a12=[4,5,6];
a11.push(...a12);
console.log(a11);
//rest parameter
function computer(a,b){
   console.log(a+b);
}
computer(3,1,2,4);

function computer(...item){
   let sum=0;
   for(var i=0;i<item.length;i++){
              sum=sum+item[i];
   }
   return sum;
  }
console.log(computer(3,1,2,4));

//for,foreach,for in,for of
//
//template literals in es6
var b=1;
var a=2;
var c=`jsdgfsjkdgfjkd ${a} jksdhafjkdg ${b} assdfg`;
var d=`jsdgfsjkdgfjkd ${a}
jksdhafjkdg ${b} 
assdfg`;
console.log(c);
console.log(d);
console.log

//day13
Position properties
need: even through if you have top, left bottom, or right  which can be used to place/align  the elements in the web page 
Now On what basis they have to be placed ??.......
1.static
2.relative
3.absolute
4.fixed 
5.sticky

1.static:They are not affected by top ,left, bottom or right
By default all the html elements are positioned static 


2.relative:
a.They are  affected by top ,left, bottom or right
b.A space is created for them in the document
c.It will affect the document flow

3.absolute
a.They are  affected by top ,left, bottom or right 
b.It will affect the document flow
c.no space is created 
d.it will be positioned w.r.t first positioned element


2 cases are there
absolute position property has to be used along with the combination of the relative
ex:if child1has to be absolute means 


4.fixed : IF you allot one specific location top,left, bottom, or right 
they are not affected by scrolling

5.sticky:
they will get affected by scrolling , but.. if you reach their position they will stick on to it
