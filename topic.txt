day-06
//anonymoys
//arrow
//iife
//api
//example api
//handle api steps

1.anonymoys
hole function 
3.IIFE:
immeadelty invoked function execution
/*syntax
(function(){
//
})(Call function);
4.API
intro api
//Application programming interface

day-07
//oop
//4pillarers
abstraction(decoding)
encapsulation(securty)
inheritance(child append parent)
polymorhism(one person do multiple role)
//main concept in oop
//class
//object

class:(collection of object,property,method)
object:(have a refferenc variable)
new:it is opp feature.that will create a new fresh object for only that class
refference variable=s1;
this->tempory refference in store.
this.brand=brand;

class car{
    constructor(brand,color){
        this.brand=brand;
        this.color=color;
    }
}
let c1= new car("audi","black");

console.log(c1.brand);
console.log(c1);
//some features
//a single object can have multiple reference
class car{
    constructor(brand,color){
        this.brand=brand;
        this.color=color;
    }
}
let c1= new car("audi","black");
//add new object
let c2= new car("audi2","black2");
let c3= new car("audi3","black3");
let c4=c3;
console.log(c1.brand);
console.log(c3);
console.log(c2);
console.log(c4.brand);

//method (method mean fuction,inside a class we use a fuction called methods.then we not use a function keyword )
class car{
    constructor(brand,color){
        this.brand=brand;
        this.color=color;
    }
    getbrand(){
        return this.brand;
        }
}
let c1= new car("audi","black");
console.log(c1.brand);
console.log(c1);
console.log(c1.getbrand());
//example
class rectangle{
    constructor(length,breadth){
        this.length=length;
        this.breadth=breadth;
            }
            area(){
                return this.length*this.breadth;
            }
}
let a1=new rectangle(2,3);

console.log(a1.length);
console.log(a1.length);
console.log(a1.area());

//day08
//mfr

//day09
//call by value,call by referenc,spead

//spread
//normal
let arr=['hello','guvi'];
console.log(arr);
//ex 1.expanding the Array
console.log(...arr);
//ex 2.string to char Array
let doc="hello";
let char=[...doc];
console.log(char);
//ex 3.combining of array using spread
let a1=[1,2,3];
let a2=[4,5,6];
//console.log(a1.concat(a2));
let a3=[...a1,...a2];
console.log(a3);
//ex 4.push a value in array
let a11=[1,2,3];
let a12=[4,5,6];
a11.push(...a12);
console.log(a11);
//rest parameter
function computer(a,b){
   console.log(a+b);
}
computer(3,1,2,4);

function computer(...item){
   let sum=0;
   for(var i=0;i<item.length;i++){
              sum=sum+item[i];
   }
   return sum;
  }
console.log(computer(3,1,2,4));

//for,foreach,for in,for of
//
//template literals in es6
var b=1;
var a=2;
var c=`jsdgfsjkdgfjkd ${a} jksdhafjkdg ${b} assdfg`;
var d=`jsdgfsjkdgfjkd ${a}
jksdhafjkdg ${b} 
assdfg`;
console.log(c);
console.log(d);
console.log

//day14
Position properties,important,override even using important keyword,gradient,overflow

need: even through if you have top, left bottom, or right  which can be used to place/align  the elements in the web page 
Now On what basis they have to be placed ??.......
1.static
2.relative
3.absolute
4.fixed 
5.sticky

1.static:They are not affected by top ,left, bottom or right
By default all the html elements are positioned static 


2.relative:
a.They are  affected by top ,left, bottom or right
b.A space is created for them in the document
c.It will affect the document flow

3.absolute
a.They are  affected by top ,left, bottom or right 
b.It will affect the document flow
c.no space is created 
d.it will be positioned w.r.t first positioned element


2 cases are there
absolute position property has to be used along with the combination of the relative
ex:if child1has to be absolute means 


4.fixed : IF you allot one specific location top,left, bottom, or right 
they are not affected by scrolling

5.sticky:
they will get affected by scrolling , but.. if you reach their position they will stick on to it

//day15
//rwd,media queries,drop down box,intro to bootstrap

//rwd
responsive web design
@media screen and (max-width: 500px) {

    div{
        background-color:red;
    }
}
@media screen and (min-width: 500px) {

div{
    background-color:green;
}
}
//intro bootstrap 4.6

//day22
//Asynchronous Meaning
// callback,promise,fetch async and await;
//it helps for the  js to be asynchronous 

//setTimeOut:to exhibit asynchronous nature
//after a specifc amount of time it will execute
//syntax:setTimeout(function as a param,timeinterval)


//event loop, call stack,Event queue

//call stack:it is used to keep track of functions to be executed(LIFO)
//it is the place where functions are executed 

//event queue:it is a place where async code waits for executions(FIFO)

//event queue will begin its execution only if call stack is empty

//Event Loop:connection between call stack and queue

//call back:
// when a function simply accepts another function as a parameter.
//That parameter function is nothing but called as callback function
// setTimeout(()=>{console.log("Hello guvi")},5000);


//Naming a callback function:

//Multi level functions:More than one functions 

//callback hell :we don't use callback for larger functions/
//because of callback hell scenario
//callback :used only for short async operations(Set Timeout)
   
   <!DOCTYPE html>
   <html lang="en">
   <head>
       <meta charset="UTF-8">
       <meta http-equiv="X-UA-Compatible" content="IE=edge">
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <title>Document</title>
   </head>
   <body>
       <script>
           //timeout function
           /*call stack:it used to keep track of functions to be executed(lifo)
           //event queue:it is a place where async code awaits for executions(fifo)
           //event queue will 
*/

//asyn
/* console.log("hello1");
            console.log("hello2");
           setTimeout(()=>{
               console.log("hello3")
           },5000);
           console.log("hello4");
           */
          //priyority in time delay 
    
          /* setTimeout(()=>{
               console.log("hello1")
           },5000);
           setTimeout(()=>{
               console.log("hello2")
           },2000);
           setTimeout(()=>{
               console.log("hello3")
           },3000);
           */
           //output
 //hello2
//hello3
//hello1

//event loop,call stack,event queue
/*call stack
* it is used to keep track of functions to be executed
eg browser history page
using 


const hi=()=>{
    bye();
console.log("hi");
}
const bye=()=>{
  console.log("byee");
}
hi();
//step1 hi() go to 
*/
/*

console.log("Hi!");

setTimeout(function timeout() {
    console.log("Click the button!");
}, 2);

console.log("Welcome to loupe.");
setTimeout(function timer() {
    console.log("Click the button!");
}, 5);
console.log("Welcome to loupe.");
console.log("Welcome to loupe.");
console.log("Welcome to loupe.");
console.log("Welcome to loupe.");
console.log("Welcome to loupe.");
console.log("Welcome to loupe.");
console.log("Welcome to loupe.");
console.log("Welcome to loupe.");
console.log("Welcome to loupe.");
//callback
whwn a function simply accepts another function as a paramenter.
that parameter function is nothing but called as callback function */
          
//naming a callback function
function foo(name){
console.log(`hello ${name} jdsfg`);
}
foo("arthi");
function intro(fname,lname,cb){
const full=`${fname} ${lname} `;
cb(full);
}
intro("arthi","et5u",foo);

          </script>
   </body>
   </html>

//promise :it returns an Object as a result of async ops
//Why promise??:To overcome call back hell scenario in js
//3 states
//1.pending 2.fulfiled 3.rejected
//initial state:pending,when you create a promise(freshly)

//pending to fullfilled:when you complete an Async Ops successfully(resolve)
//pending to Rejected:when  Async Ops fails(reject)

//syntax is : variablename=new Promise();
//this object takes function as a parameter
//inside the function we have,resolve and reject

//age to vote :
//getting age from the user:(async ops)


//.then and .catch 
//.then is used to access the values of the resolved state(success)
//.catch is used to access the values of the rejected state(failure)
//Why ?:Output of the promise is object. To access the result of the promise
//we use .then and .catch


//how to use promise in functions ?



//advantages of promises:
//1st adv: usage of promise as a return type of a function 
//2nd adv:we can use to handle ,multiple async ops
//chaining of promises
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
       // day23
//asyn/await
/*
function getdata(){
return new Promise((resolve,reject)=>{
setTimeout(()=>resolve("this is resolved"),3000);
});
}
function putdata(){
return new Promise((resolve,reject)=>{
setTimeout(()=>reject("this is reject"),5000);
});
}
 async function foo(){
const s1=await getdata(); //waiting  result then async function 
const s2=await putdata(); 
console.log(s1);
console.log(s2);
}
      foo()
      //console.log(foo());
     */
      //muli api fetch
/*
function getdata(){
return fetch("https://data.covid19india.org/v4/min/timeseries.min.json");
}
function putdata(){
    return fetch("https://raw.githubusercontent.com/rvsp/restcountries-json-data/master/res-countries.json");
}
 async function foo(){
const s1=await getdata();
//then replace await
console.log(s1);
let result1=await s1.json();
console.log(result1);
const s2=await putdata(); 
console.log(s2);
}
      foo()
      //console.log(foo());
      */
      //chain promise
      <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
      /*  let p1=new Promise((resolve,reject)=>{
    if(true){
        setTimeout(()=>{console.log("resolve1")},3000);
       
    }
    else{
        setTimeout(()=>{console.log("reject1")},3000);
    }
});
let p2=new Promise((resolve,reject)=>{
    if(true){
        setTimeout(()=>{console.log("resolve2")},2000);
       
    }
    else{
        setTimeout(()=>{console.log("reject2")},2000);
    }
});
let p3=new Promise((resolve,reject)=>{
    if(true){
        setTimeout(()=>{console.log("resolve3")},5000);
       
    }
    else{
        setTimeout(()=>{console.log("reject3")},5000);
    }
});
console.log(p1,p2,p3);
*/
//p1.then((data)=>console.log())
/* ALL VALUE TRUE THEN
let p1=new Promise((resolve,reject)=>{
    if(true){
        setTimeout(()=>{console.log("resolve1")},3000);
       
    }
    else{
        setTimeout(()=>{console.log("reject1")},3000);
    }
});
let p2=new Promise((resolve,reject)=>{
    if(true){
        setTimeout(()=>{console.log("resolve2")},2000);
       
    }
    else{
        setTimeout(()=>{console.log("reject2")},2000);
    }
});
let p3=new Promise((resolve,reject)=>{
    if(true){
        setTimeout(()=>{console.log("resolve3")},5000);
       
    }
    else{
        setTimeout(()=>{console.log("reject3")},5000);
    }
});
console.log(p1,p2,p3);
Promise.all([p1,p2,p3]).then((data)=>console.log(data)).catch((error)=>console.log(error));*/
//order change 
/*
let p1=new Promise((resolve,reject)=>{
    if(true){
        setTimeout(()=>resolve("hello1"),3000);
       
    }
    else{
        setTimeout(()=>resolve("hello1"),3000);
    }
});
let p2=new Promise((resolve,reject)=>{
    if(true){
        setTimeout(()=>resolve("hello1"),5000);
       
    }
    else{
        setTimeout(()=>resolve("hello1"),5000);
    }
});
let p3=new Promise((resolve,reject)=>{
    if(true){
        setTimeout(()=>resolve("hello1"),2000);
       
    }
    else{
        setTimeout(()=>resolve("hello1"),2000);
    }
});
console.log(p1,p2,p3);
Promise.all([p2,p3,p1]).then((data)=>console.log(data)).catch((error)=>console.log(error));
/*

//ANY FALSE THEN WHAT HAPPEN
//STOP THEN THAT VALUE DISPLAY
//single false
/*let p1=new Promise((resolve,reject)=>{
    if(true){
        setTimeout(()=>resolve("hello1"),2000);
       
    }
    else{
        setTimeout(()=>reject("hello1"),2000);
    }
});
let p2=new Promise((resolve,reject)=>{
    if(false){
        setTimeout(()=>resolve("hello2"),5000);
       
    }
    else{
        setTimeout(()=>reject("hello2"),5000);
    }
});
let p3=new Promise((resolve,reject)=>{
    if(true){
        setTimeout(()=>resolve("hello3"),3000);
       
    }
    else{
        setTimeout(()=>reject("hello3"),3000);
    }
});
console.log(p1,p2,p3);
//using to display in 
Promise.all([p1,p2,p3]).then((data)=>console.log(data)).catch((error)=>console.log(error));
*/

//more false then display a least time to display
/*
let p1=new Promise((resolve,reject)=>{
    if(false){
        setTimeout(()=>resolve("hello1"),12000);
       
    }
    else{
        setTimeout(()=>reject("hello1"),12000);
    }
});
let p2=new Promise((resolve,reject)=>{
    if(true){
        setTimeout(()=>resolve("hello2"),5000);
       
    }
    else{
        setTimeout(()=>reject("hello2"),5000);
    }
});
let p3=new Promise((resolve,reject)=>{
    if(false){
        setTimeout(()=>resolve("hello3"),3000);
       
    }
    else{
        setTimeout(()=>reject("hello3"),3000);
    }
});
console.log(p1,p2,p3);
//using to display in 
Promise.all([p1,p2,p3]).then((data)=>console.log(data)).catch((error)=>console.log(error));

*/
//
/*main example
let res=fetch('https://raw.githubusercontent.com/rvsp/restcountries-json-data/master/res-countries.json');
console.log(res);
res.then((data)=>{
    //change json
  return data.json();  
}).then((data)=>console.log(data)).catch((error)=>console.log(error));
*/
/*
//india
let res=fetch('https://data.covid19india.org/v4/min/data.min.json');
console.log(res);
res.then((data)=>{
    //change json
  return data.json();  
}).then((data)=>

{    console.log(data['TN']);
console.log(`total in tamilnadu`);
console.log( data['TN'].total);
console.log(`total in chennai`);
console.log( data['TN'].districts.Chennai);
console.log( data['TN'].districts.Chennai.total);

  //return foo(data); 
}).catch((error)=>{
    console.log(error);
})
*/
//world
let res1=fetch('https://api.covid19api.com/total/country/india');
console.log(res1);
res1.then((data1)=>{
    //change json
  return data1.json();  
}).then((data1)=>
{    console.log(data1);

    console.log(data1.Confirmed);

  //return foo(data); 
}).catch((error)=>{
    console.log(error);
})

        </script>
</body>
</html>
      
      
      
     //xml in async await
     //resolved
     /*async function foo(){
const s1=await fetch("https://data.covid19india.org/v4/min/timeseries.min.json");
//then replace await
let result1=await s1.json();
console.log(result1);
}
     foo();
     //reject
     function putdata(){
return new Promise((resolve,reject)=>{
setTimeout(()=>reject("this is reject"),5000);
});
}

async function foo(){
    try{
const data=await putdata();

    }
catch(error){
console.log(error);
}
}
foo();
async function foo(){
    try{
const data=await fetch("https://raw.githubusercontent.com/rvsp/restcountries-json-data/master/res-countries.json");
let result=await data.json();
console.log(result);
for(var i in result){
    console.log(result[i].name);
}

}
catch(error){
console.log(error);
}
}
foo();
*/

        </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
async function getdata(){
   
   let res=await fetch('https://raw.githubusercontent.com/rvsp/restcountries-json-data/master/res-countries.json')
   let result= await res.json();
   console.log(result);
   try {
   
       for(var i in result){
       var name=result[i].name;
       var latlon=result[i].latlng;
        wd(name,...latlon);
   }

   } 
catch (error) {
   console.log("invalid country"+name+error.message);
}
}
//day
async function wd(name,lat,lon){
try {
    
  let res1=await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=726dc15721bbb4c4994af8ef267aec0c`)
  let result1=await res1.json();
  console.log(`${name}:${result1.main.temp}`);

} catch (error) {
  console.log(error); 
}
}

getdata();




        </script>
</body>
</html>
